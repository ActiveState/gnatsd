#!/usr/bin/env python
# Wrapper script to launch gnatsd on a Stackato cluster node.
# Fetches cluster config from Stackato config server (redis).

import urlparse
import redis
import json
import string
import os


NATS_ROLE_NAME = 'controller'  # TODO: change this
PORT = 4242
CLUSTER_PORT = 4244

CONFIG_TEMPLATE = string.Template(r'''
port: $port

cluster {
	host: '$core_ip'
	port: $cluster_port

	routes = [
$routes_multiline
	]
}
''')

TMP_CONFIG_PATH = "/tmp/gnatsd.conf"


def get_config_redis_uri():
	return urlparse.urlparse(open('/s/etc/kato/redis_uri').read())

def create_config_redis_conn():
	uri = get_config_redis_uri()
	host, port = uri.netloc.split(':')
	port = int(port)
	db = int(uri.path.strip('/'))
	return redis.StrictRedis(host=host, port=port, db=db)

def get_nodes_with_gnatsd(redis_conn):
	node = json.loads(redis_conn.get('node'))
	for ipaddr, info in node.items():
		if NATS_ROLE_NAME in info['roles']:
			yield ipaddr

def get_cluster_mbusip(redis_conn):
	return json.loads(redis_conn.get('cluster'))['mbusip']

def generate_gnatsd_config(redis_conn, routes):
	return CONFIG_TEMPLATE.substitute(
		port = PORT,
		cluster_port = CLUSTER_PORT,
		core_ip = get_cluster_mbusip(redis_conn),
		routes_multiline = "\n".join(routes))


def main():
	r = create_config_redis_conn()
	nodes = list(get_nodes_with_gnatsd(r))
	routes = ["nats-route://%s:%s" % (ip, PORT) for ip in nodes]
	print "Found routes: %s" % routes
	config = generate_gnatsd_config(r, routes)
	print "Generating config:" + config
	with open(TMP_CONFIG_PATH, "w") as f:
		f.write(config)
	os.execv("/s/go/bin/gnatsd", ["/s/go/bin/gnatsd", "-c", TMP_CONFIG_PATH])

if __name__ == '__main__':
	main()